import re
import json

# === 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
ICS_FILE = "calendar.ics"
OUTPUT_JSON = "court_dates.json"
CASE_NUMBER = "–ê40-183194/2015"

# === 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ ===
try:
    with open(ICS_FILE, "r", encoding="utf-8") as f:
        ics_data = f.read()
except FileNotFoundError:
    print(f"‚ùå –§–∞–π–ª {ICS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    exit()

# === 3. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏ —Å–æ–±—ã—Ç–∏–π ===
event_blocks = re.findall(r"BEGIN:VEVENT.*?END:VEVENT", ics_data, re.DOTALL)
print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(event_blocks)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

# === 4. –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π ===
court_events = []
skipped_events = []

for block in event_blocks:
    lines = block.splitlines()
    event = {}

    for line in lines:
        if line.startswith("DTSTART"):
            event["start"] = line.strip()
        elif line.startswith("DTEND"):
            event["end"] = line.strip()
        elif line.startswith("LOCATION"):
            location = re.sub(r'LOCATION(;.*?:)?', '', line).strip()
            location = location.replace("\\,", ",").replace("\n", "")
            event["location"] = location
        elif line.startswith("DESCRIPTION"):
            event["description"] = line[11:].strip()

    # === 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø—É—Å—Ç—ã–µ" —Å–æ–±—ã—Ç–∏—è ===
    reason = ""
    if "start" not in event or "end" not in event:
        reason = "–ù–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"
    elif "location" not in event or event["location"] == "":
        reason = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
    elif CASE_NUMBER not in event.get("description", ""):
        reason = "–î–µ–ª–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ê40-183194/2015"
    elif re.search(r"VALUE=DATE:0001", event.get("start", "")) or re.search(r"VALUE=DATE:0001", event.get("end", "")):
        reason = "–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ 0001-01-01 (–ø—É—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ)"
    else:
        # === 6. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ ===
        start_match = re.search(r"(\d{8})T(\d{6})", event["start"])
        end_match = re.search(r"(\d{8})T(\d{6})", event["end"])

        if not start_match or not end_match:
            reason = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"
        else:
            start_date = start_match.group(1)
            end_date = end_match.group(1)

            if start_date.startswith("0001") or end_date.startswith("0001"):
                reason = "–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0001 (–ø—É—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ)"
            else:
                # === 7. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ ISO 8601 ===
                court_events.append({
                    "case_number": CASE_NUMBER,
                    "start": f"{start_date[:4]}-{start_date[4:6]}-{start_date[6:8]}T{start_match.group(2)[:2]}:{start_match.group(2)[2:4]}:{start_match.group(2)[4:6]}+03:00",
                    "end": f"{end_date[:4]}-{end_date[4:6]}-{end_date[6:8]}T{end_match.group(2)[:2]}:{end_match.group(2)[2:4]}:{end_match.group(2)[4:6]}+03:00",
                    "location": event["location"],
                    "description": event["description"]
                })
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–±—ã—Ç–∏—é

    # === 8. –õ–æ–≥–∏—Ä—É–µ–º "–ø—É—Å—Ç—ã–µ" —Å–æ–±—ã—Ç–∏—è ===
    skipped_events.append({
        "block": block,
        "reason": reason
    })

# === 9. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
with open(OUTPUT_JSON, "w", encoding="utf-8") as f:
    json.dump(court_events, f, ensure_ascii=False, indent=4)

# === 10. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ "–ø—É—Å—Ç—ã—Ö" —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
with open("skipped_events.json", "w", encoding="utf-8") as f:
    json.dump(skipped_events, f, ensure_ascii=False, indent=4)

# === 11. –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(court_events)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π")
print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_JSON}")
print(f"‚ÑπÔ∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ {len(skipped_events)} —Å–æ–±—ã—Ç–∏–π –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:")
for i, event in enumerate(skipped_events[:5]):  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
    print(f"\n--- –°–æ–±—ã—Ç–∏–µ {i + 1} ---")
    print(f"–ü—Ä–∏—á–∏–Ω–∞: {event['reason']}")